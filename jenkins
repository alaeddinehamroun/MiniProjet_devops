pipeline {
    environment {
        registry = "faridadwanii/python-jenkins-app" //To push an image to Docker Hub, you must first name your local image using your Docker Hub username and the repository name that you created through Docker Hub on the web.
        registryCredential = 'docker-hub-login'
        dockerImage = ''
    }
    agent any
/*    stages {
        stage('build checkout') {
            steps {
                git 'https://github.com/Farid-Adwani/pipeline-ci-cd'
            }
        }
        
        
        
        
        
        
        stage ('Stop previous running container'){
            steps{
                sh returnStatus: true, script: 'docker stop $(docker ps -a | grep ${JOB_NAME} | awk \'{print $1}\')'
                sh returnStatus: true, script: 'docker rmi $(docker images | grep ${registry} | awk \'{print $3}\') --force' 
                sh returnStatus: true, script: 'docker rm ${JOB_NAME}'
            }
        }
        
        
        stage('Build Image') {
            steps {
                script {
                    img = registry + ":${env.BUILD_ID}"
                    println ("${img}")
                    dockerImage = docker.build("${img}")
                }
            }
        }
        
        
        /*stage('Test - Run Docker Container on Jenkins node') {
           steps {

                sh label: '', script: "docker run -d --name ${JOB_NAME} -p 5000:5000 ${img}"
          }
        }*/
        
      /*  stage('Push To DockerHub') {
            steps {
                script {
                    docker.withRegistry( 'https://registry.hub.docker.com ', registryCredential ) {
                        dockerImage.push()
                    }
                }
            }
        }*/
        
        
       /* stage('Configure Server with Ansible') {
        steps {
            sshagent(credentials: ['docker-test']) {
                withCredentials([string(credentialsId: 'kali_pass', variable: 'SUDO_PASSWORD')]) {
                    script {
                        sh '''
                        ansible-playbook -i inventory playbook.yml --extra-vars "ansible_become_pass=${SUDO_PASSWORD}"
                        '''
                    }
                }
            }
         
         }
        }*/
        */
        
        
        stage('Deploy to Kubernetes Cluster') {
            steps {
                script {
                    def VirtualMachineIP = "192.168.56.101"
                    // Kubernetes deployment commands
                    sshagent(['docker-test']) {
                     
                        sh "kubectl apply -f ./deployment.yml"
                        sh "kubectl apply -f ./service.yml"

                    }
                }
            }
        }
            
        
        
      /*  stage('Deploy to Test Server') {
            steps {
                script {
                    def VirtualMachineIP = "192.168.56.101"
                    def stopcontainer = "docker stop ${JOB_NAME}"
                    def delcontName = "docker rm ${JOB_NAME}"
                    def delimages = 'docker image prune -a --force'
                    def drun = "docker run -d --name ${JOB_NAME} -p 5000:5000 ${img}"
                    println "${drun}"
                    sshagent(['docker-test']) {
                        sh returnStatus: true, script: "ssh -o StrictHostKeyChecking=no kali@${VirtualMachineIP} ${stopcontainer} "
                        sh returnStatus: true, script: "ssh -o StrictHostKeyChecking=no kali@${VirtualMachineIP} ${delcontName}"
                        sh returnStatus: true, script: "ssh -v -o StrictHostKeyChecking=no kali@${VirtualMachineIP} ${delimages}"

                    // some block
                        sh  "ssh -v -o StrictHostKeyChecking=no kali@${VirtualMachineIP} ${drun}"
                    }
                }
            }
        }
        
    */    
        
    }
    
    
}